set nocompatible               " be iMproved
filetype on                   " required!
filetype indent on
filetype plugin on
set nofoldenable

" ******************************************************************
"  Backspace
" ******************************************************************
set backspace=indent,eol,start

" ******************************************************************
"  Mapleader
" ******************************************************************
let mapleader = "\<Space>"

" ******************************************************************
"  Vundle
" ******************************************************************
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" ******************************************************************
"  Color Scheme
" ******************************************************************
let &t_Co=256
set background=dark
colorscheme wombat256mod

" ******************************************************************
"  Line Numbers
" ******************************************************************
set number

" ******************************************************************
"  Tabstop
" ******************************************************************
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
 
" ******************************************************************
"  Turn off auto indenting
" ******************************************************************
set nocindent
set nosmartindent
set autoindent
set indentexpr=
set rtp+=$GOROOT/misc/vim
filetype plugin indent off
syntax on
set mouse=r

" ******************************************************************
"  Case insensitive search
" ******************************************************************
set ignorecase

" ******************************************************************
"  Filetype definitions
" ******************************************************************
au BufRead,BufNewFile *.less set filetype=less
" source vcl
au BufRead,BufNewFile *.vcl set filetype=vcl
" Source ejs in Vim
au BufNewFile,BufRead *.ejs set filetype=html
" Source pug in vim
au BufNewFile,BufRead *.pug set filetype=pug
au BufNewFile,BufRead *.jade setf pug
" Source .snippets
au BufNewFile,BufRead *.snippets set filetype=snippets
" Go
au BufRead,BufNewFile *.go set filetype=go

" ******************************************************************
"  Bundles
" ******************************************************************
Bundle 'gmarik/vundle'

  " ******************************************************************
  "  Functional
  " ******************************************************************
  Bundle 'jiangmiao/auto-pairs'
  Bundle 'scrooloose/nerdtree.git'
  Bundle 'scrooloose/nerdcommenter.git'
  Bundle 'ervandew/supertab.git'
    let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
    "let g:SuperTabDefaultCompletionType = '<C-n>'
    let g:SuperTabDefaultCompletionType = "context"
  Bundle 'jwhitley/vim-matchit'
  Bundle 'ctrlpvim/ctrlp.vim'
    " Ignore files in gitignore
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
    nmap <Leader>r :CtrlPMRU<CR>
    vmap <Leader>r :CtrlPMRU<CR>
    nmap <Leader>f :CtrlP<CR>
    vmap <Leader>f :CtrlP<CR>
    " Ctrl-P - Enter to Open in New Tab
    let g:ctrlp_prompt_mappings = {
     \ 'AcceptSelection("e")': ['<c-t>'],
     \ 'AcceptSelection("t")': ['<cr>'],
     \ }
  Bundle 'easymotion/vim-easymotion'
   " Gif config
    map  / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)
    " Smartcase
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1
    " Jump to anywhere you want with minimal keystrokes, with just one key binding.
    " `s{char}{label}`
    nmap s <Plug>(easymotion-overwin-f)
    nmap w <Plug>(easymotion-w)
    " Searcg and replace highlighted text
    vnoremap <Leader>% "hy:%s/<C-r>h//gc<left><left><left>
  Bundle 'Valloric/YouCompleteMe'
    "let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    "let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    set completeopt-=preview
    " Colors
    highlight Pmenu ctermfg=187 ctermbg=235
    highlight PmenuSel ctermfg=235 ctermbg=187
  Bundle 'ternjs/tern_for_vim'
  Bundle 'airblade/vim-gitgutter'

  " ******************************************************************
  "  Syntax Highlighter + Checkers + Selectors
  " ******************************************************************
  Bundle 'sheerun/vim-polyglot'
  Bundle 'scrooloose/syntastic.git'
  Bundle 'robmiller/vim-movar'
    " Select and log snippet
    imap <c-l> <Esc>vavyocon<c-j><Esc>p$i
    nmap <c-l> vavyocon<c-j><Esc>p$
    "imap <c-k> <Esc>vavyolog<c-j><Esc>p$i
    "nmap <c-k> vavyolog<c-j><Esc>p$

  " ******************************************************************
  "  Lightline
  " ******************************************************************
  Bundle 'itchyny/lightline.vim'
  Bundle 'tpope/vim-fugitive.git'
    set noshowmode
    set laststatus=2
    source ~/dotfiles/vimrc/frankelColorScheme.vim
    let g:lightline = {
      \ 'colorscheme': 'frankelColorScheme',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'gitgutter' ] ],
      \   'right': [ [ 'hostname' ], [ 'relativepath', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'gitgutter': 'LightlineGitGutter',
      \   'hostname': 'LightlineHostname'
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
      \ 'tab': {
      \   'active': [ 'filename', 'modified' ],
      \   'inactive': [ 'filename', 'modified' ]
      \ }
    \}

    function LightlineHostname()
        return hostname()
      endfunction

    function! LightlineFugitive()
      return exists('*fugitive#head') ? printf( '%s%s', "\uE0A0 ", fugitive#head()) : ''
    endfunction

    function! LightlineGitGutter() 
      let hunks = exists('*GitGutterGetHunkSummary') ? GitGutterGetHunkSummary() : ''
      let string = ''
      if !empty(hunks)
        for i in [0, 1, 2]
          if (hunks[i] > 0)
            if (i == 0)
              let symbol = '+'
            elseif (i == 1)
              let symbol = '~'
            elseif (i == 2)
              let symbol = '-'
            endif
            let string .= printf('%s%s ', symbol, hunks[i])
          endif
        endfor
      endif

      " Strip leading and trailing whitespace
      let string = substitute(string, '^\s*\(.\{-}\)\s*$', '\1', '')

      return string
    endfunction

  " ******************************************************************
  "  Formatting
  " ******************************************************************
  Bundle 'godlygeek/tabular'
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a: :Tabularize /:<CR>
    vmap <Leader>a: :Tabularize /:<CR>

  " ******************************************************************
  "  Snippits
  " ******************************************************************
  Bundle 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger = "<c-j>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<c-tab>"

" ******************************************************************
"  Open NerdTree on Enter
" ******************************************************************
filetype plugin indent on     " required! 
function! StartUp()
 if 0 == argc()
   NERDTree
   call feedkeys("\<C-W>l:q\<Enter>","t")
 end
endfunction
au VimEnter * call StartUp()

" ******************************************************************
"  Reset background color on exit
" ******************************************************************
au VimLeave * !tput sgr0
