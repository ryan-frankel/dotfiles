" ******************************************************************
"  Indents and filetypes
" ******************************************************************
set nocompatible               " be iMproved
filetype on                   " required!
filetype indent on
filetype plugin on
set nofoldenable

" ******************************************************************
"  Mapleader
" ******************************************************************
let mapleader = "\<Space>"
:map  <F5> <nop>
:map! <F5> <nop>
let maplocalleader = "\<F5>"
set showcmd

" ******************************************************************
"  Misc.
" ******************************************************************
set backspace=indent,eol,start "backspace
set number "Line Numbers
set ignorecase "Case insensitive search

" ******************************************************************
"  Vundle
" ******************************************************************
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" ******************************************************************
"  Color Scheme
" ******************************************************************
let &t_Co=256
set background=dark
colorscheme wombat256mod
" Fix for tmux background colors in vim
set t_ut= 

" ******************************************************************
"  Tabstop
" ******************************************************************
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
"set smarttab
 
" ******************************************************************
"  Turn off auto indenting
" ******************************************************************
set nocindent
set nosmartindent
set autoindent
set indentexpr=
set rtp+=$GOROOT/misc/vim
filetype plugin indent off
syntax on
set mouse=r

" ******************************************************************
"  Leader Mappings
" ******************************************************************
" Write
nmap <Leader>w :w<CR> 
nmap <LocalLeader>w :w<CR>
vmap <Leader>w :w<CR> 
vmap <LocalLeader>w :w<CR> 
imap <LocalLeader>w <Esc>:w<CR><Esc>i
" Quit
nmap <Leader>q :q<CR> 
nmap <LocalLeader>q :q<CR> 
vmap <Leader>q :q<CR> 
vmap <LocalLeader>q :q<CR> 
"Jump to end-of-line
imap <LocalLeader>e <Esc>A<Space>
" Add ; at end-of-line
imap <LocalLeader>; <Esc>A;
nmap <LocalLeader>; <Esc>A;
nmap <Leader>; <Esc>A;
" Add { at end-of-line
imap <LocalLeader>[ <Esc>A {<CR>
nmap <LocalLeader>[ <Esc>A {<CR>
nmap <Leader>[ <Esc>A {<CR>
" Tab 
imap <LocalLeader>t <Esc>gti
nmap <LocalLeader>t gt
vmap <LocalLeader>t gt
" Shell
imap <LocalLeader>as <Esc>:sh<CR>
nmap <LocalLeader>as <Esc>:sh<CR>
vmap <LocalLeader>as <Esc>:sh<CR>
" Psate Mode
"set pastetoggle=<LocalLeader>p
imap <LocalLeader>p :set paste!<CR>
nmap <LocalLeader>p :set paste!<CR>
vmap <LocalLeader>p :set paste!<CR>
nmap <Leader>p :set paste!<CR>
vmap <Leader>p :set paste!<CR>

" NERDTreeToggle
map <LocalLeader><Tab> :NERDTreeToggle<CR>
nmap <Leader><Tab> :NERDTreeToggle<CR>
vmap <Leader><Tab> :NERDTreeToggle<CR>

" ******************************************************************
"  Splits
" ******************************************************************
"nmap <Leader>- <C-W>S
"nmap <LocalLeader>- <C-W>S
"nmap <Leader>\ <C-W>v
"nmap <LocalLeader>\ <C-W>v

" ******************************************************************
"  Split Movement
" ******************************************************************
"nnoremap <LocalLeader>h <C-W><C-H>
"nnoremap <LocalLeader>j <C-W><C-H>
"nnoremap <LocalLeader>k <C-W><C-K>
"nnoremap <LocalLeader>l <C-W><C-L>

" ******************************************************************
"  Window Movement Mappings
" ******************************************************************
"nnoremap <LocalLeader>j <C-W><C-J>
"nnoremap <LocalLeader>k <C-W><C-K>
"nnoremap <LocalLeader>l <C-W><C-L>
"nnoremap <LocalLeader>h <C-W><C-H>

" ******************************************************************
"  Filetype definitions
" ******************************************************************
au BufRead,BufNewFile *.less set filetype=less
" source vcl
au BufRead,BufNewFile *.vcl set filetype=vcl
" Source ejs in Vim
au BufNewFile,BufRead *.ejs set filetype=html
" Source pug in vim
au BufNewFile,BufRead *.pug set filetype=pug
au BufNewFile,BufRead *.jade setf pug
" Source .snippets
au BufNewFile,BufRead *.snippets set filetype=snippets
" Go
au BufRead,BufNewFile *.go set filetype=go

" ******************************************************************
"  Bundles
" ******************************************************************
Bundle 'gmarik/vundle'

  " ******************************************************************
  "  Functional
  " ******************************************************************
  Bundle 'jiangmiao/auto-pairs'
  Bundle 'scrooloose/nerdtree.git'
    " NERDTree
    let NERDTreeMinimalUI = 1
    let s:NTCWDColor      = 70
    let s:NTDirColor      = 70
    let s:NTExecColor     = 9
    let s:NTFileColor     = 7
    exec "hi NERDTreeDir      ctermfg=" . s:NTDirColor
    exec "hi NERDTreeDirSlash ctermfg=" . s:NTDirColor
    exec "hi NERDTreeCWD      ctermfg=" . s:NTCWDColor
    exec "hi NERDTreeExecFile ctermfg=" . s:NTExecColor
    exec "hi NERDTreeOpenable ctermfg=" . s:NTDirColor
    exec "hi NERDTreeClosable ctermfg=" . s:NTDirColor
    let g:NERDTreeDirArrowExpandable="▹"
    let g:NERDTreeDirArrowCollapsible="▿"

  Bundle 'scrooloose/nerdcommenter.git'
    nnoremap <Leader>c            : call NERDComment(0,"toggle")<CR>
    nnoremap <LocalLeader>c       : call NERDComment(0,"toggle")<CR>
    vnoremap <Leader>c            : call NERDComment(0,"toggle")<CR>
    vnoremap <LocalLeader>c       : call NERDComment(0,"toggle")<CR>
    imap <LocalLeader>c <esc>     : call NERDComment(0,"toggle")<CR>i
  Bundle 'ervandew/supertab.git'
    let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
    "let g:SuperTabDefaultCompletionType = '<C-n>'
    let g:SuperTabDefaultCompletionType = "context"
  Bundle 'jwhitley/vim-matchit'
  Bundle 'ctrlpvim/ctrlp.vim'
    " Ignore files in gitignore
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
    nmap <Leader>r :CtrlPMRU<CR>
    nmap <LocalLeader>r :CtrlPMRU<CR>
    vmap <Leader>r :CtrlPMRU<CR>
    vmap <LocalLeader>r :CtrlPMRU<CR>
    nmap <Leader>f :CtrlP<CR>
    nmap <LocalLeader>f :CtrlP<CR>
    vmap <Leader>f :CtrlP<CR>
    vmap <LocalLeader>f :CtrlP<CR>
    " Ctrl-P - Enter to Open in New Tab
    let g:ctrlp_prompt_mappings = {
     \ 'AcceptSelection("e")': ['<c-t>'],
     \ 'AcceptSelection("t")': ['<cr>'],
     \ }
  Bundle 'easymotion/vim-easymotion'
   " Gif config
    map  / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)
    " Smartcase
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1
    " Jump to anywhere you want with minimal keystrokes, with just one key binding.
    " `s{char}{label}`
    nmap s <Plug>(easymotion-overwin-f)
    nmap w <Plug>(easymotion-w)
    " Search and replace highlighted text
    vnoremap <Leader>5 "hy:%s/<C-r>h//gc<left><left><left>
    vnoremap <LocalLeader>5 "hy:%s/<C-r>h//gc<left><left><left>
    vnoremap <Leader>% "hy:%s/<C-r>h//gc<left><left><left>
    vnoremap <LocalLeader>% "hy:%s/<C-r>h//gc<left><left><left>
  Bundle 'Valloric/YouCompleteMe'
    set completeopt-=preview
    " Colors
    highlight Pmenu ctermfg=187 ctermbg=235
    highlight PmenuSel ctermfg=235 ctermbg=187
  Bundle 'ternjs/tern_for_vim'
  Bundle 'airblade/vim-gitgutter'
  Bundle 'terryma/vim-expand-region'
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)

  " ******************************************************************
  "  Syntax Highlighter + Checkers + Selectors
  " ******************************************************************
  Bundle 'sheerun/vim-polyglot'
    set conceallevel=0
  Bundle 'scrooloose/syntastic.git'
  Bundle 'robmiller/vim-movar'
    " Select and log snippet
    imap <LocalLeader>l <Esc>vavyocon<LocalLeader><Space><Esc>p$i
    nmap <Leader>l vavyocon<LocalLeader><Space><Esc>p$
    nmap <LocalLeader>l vavyocon<LocalLeader><Space><Esc>p$

  " ******************************************************************
  "  Lightline
  " ******************************************************************
  Bundle 'itchyny/lightline.vim'
  Bundle 'tpope/vim-fugitive.git'
    set noshowmode
    set laststatus=2
    source ~/dotfiles/vimrc/colors/lightlineColorScheme.vim
    let g:lightline = {
      \ 'colorscheme': 'lightlineColorScheme',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'gitgutter' ] ],
      \   'right': [ [ 'hostname' ], [ 'relativepath', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'gitgutter': 'LightlineGitGutter',
      \   'hostname': 'LightlineHostname'
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
      \ 'tab': {
      \   'active': [ 'filename', 'modified' ],
      \   'inactive': [ 'filename', 'modified' ]
      \ }
    \}

    function LightlineHostname()
        return hostname()
      endfunction

    function! LightlineFugitive()
      return exists('*fugitive#head') ? printf( '%s%s', "\uE0A0 ", fugitive#head()) : ''
    endfunction

    function! LightlineGitGutter() 
      let hunks = exists('*GitGutterGetHunkSummary') ? GitGutterGetHunkSummary() : ''
      let string = ''
      if !empty(hunks)
        for i in [0, 1, 2]
          if (hunks[i] > 0)
            if (i == 0)
              let symbol = '+'
            elseif (i == 1)
              let symbol = '~'
            elseif (i == 2)
              let symbol = '-'
            endif
            let string .= printf('%s%s ', symbol, hunks[i])
          endif
        endfor
      endif

      " Strip leading and trailing whitespace
      let string = substitute(string, '^\s*\(.\{-}\)\s*$', '\1', '')

      return string
    endfunction

  " ******************************************************************
  "  Formatting
  " ******************************************************************
  Bundle 'godlygeek/tabular'
    " equals
    nmap <Leader>a= :Tabularize /=.*/<CR>
    nmap <LocalLeader>a= :Tabularize /=.*/<CR>
    nmap <LocalLeader>= :Tabularize /=.*/<CR>
    vmap <Leader>a= :Tabularize /=.*/<CR>
    vmap <LocalLeader>a= :Tabularize /=.*/<CR>
    vmap <LocalLeader>= :Tabularize /=.*/<CR>

    " colon
    nmap <Leader>a: :Tabularize /:.*/<CR>
    nmap <LocalLeader>a: :Tabularize /:.*/<CR>
    vmap <Leader>a: :Tabularize /:.*/<CR>
    vmap <LocalLeader>a: :Tabularize /:.*/<CR>

  " ******************************************************************
  "  Snippits
  " ******************************************************************
  Bundle 'SirVer/ultisnips'
    "let g:UltiSnipsExpandTrigger       = '<c-j>'
    let g:UltiSnipsExpandTrigger       = '<LocalLeader><Space>'
    let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<c-tab>"

" ******************************************************************
"  Open NerdTree on Enter
" ******************************************************************
filetype plugin indent on     " required! 
function! StartUp()
 if 0 == argc()
   NERDTree
   call feedkeys("\<C-W>l:q\<Enter>","t")
 end
endfunction
au VimEnter * call StartUp()

" ******************************************************************
"  Reset background color on exit
" ******************************************************************
au VimLeave * !tput sgr0
